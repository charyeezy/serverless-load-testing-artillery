service: serverless-load-testing
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  memorySize: 128
  stage: ${opt:stage, 'develop'}
  region: eu-west-1
  # this will make the environment variable available in code to the lambdas
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # https://theburningmonk.com/2019/02/lambda-optimization-tip-enable-http-keep-alive/
    EMPLOYEES_TABLE: ${self:custom.tableName}
  apiGateway:
    shouldStartNameWithService: true
  # the role required by the lambdas to work with dynamodb
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource:
            - { "Fn::GetAtt": ["EmployeesDynamoDBTable", "Arn"] }
plugins:
  - serverless-webpack
package:
  individually: true
functions:
  # function to create the employee record with a post
  createEmployee:
    handler: src/employee/create-employee/create-employee.handler
    timeout: 30
    events:
      - http:
          path: employees
          method: post
  # function to get the employee by employee Id
  getEmployee:
    handler: src/employee/get-employee/get-employee.handler
    timeout: 30
    events:
      - http:
          path: employees/{id}
          method: get
custom:
  tableName: "employees-${self:provider.stage}"
  # webpack configuration
  webpack:
    webpackConfig: "webpack.config.js"
    includeModules:
      forceExclude:
        - aws-sdk
resources:
  Resources:
    # the dynamodb table where the employee records will be stored
    EmployeesDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
